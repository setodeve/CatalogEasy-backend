name: Continuous Delivery

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: catalogeasy-cluster
  ECS_SERVICE_BACKEND: calatogeasy-backend-service
  ECS_TASK_DEFINITION_BACKEND: .aws/task-definition.json
  ECR_REPOSITORY_RAILS: catlogeasy-rails
  CONTAINER_NAME_RAILS: rails

permissions:
  contents: read

jobs:
  check_commit_message:
    runs-on: ubuntu-latest
    outputs:
      is_deploy_commit: ${{ steps.filter.outputs.is_deploy }}
    steps:
      - name: Check for commit message
        id: filter
        run: echo "::set-output name=is_deploy::$(git log -1 --pretty=%B | grep -i '@' && echo 'true' || echo 'false')"

  deploy-rails:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: rewrite task-definition
      run: |
        sed -i -e 's|AWS_S3_ACCESS_KEY_ID|${{ secrets.AWS_S3_ACCESS_KEY_ID }}|g' .aws/task-definition.json
        sed -i -e 's|AWS_S3_SECRET_ACCESS_KEY|${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}|g' .aws/task-definition.json
        sed -i -e 's|RDS_DB_HOST|${{ secrets.RDS_DB_HOST }}|g' .aws/task-definition.json
        sed -i -e 's|RDS_DB_PASSWORD|${{ secrets.RDS_DB_PASSWORD }}|g' .aws/task-definition.json
        sed -i -e 's|RDS_DB_PORT|${{ secrets.RDS_DB_PORT }}|g' .aws/task-definition.json
        sed -i -e 's|RDS_DB_USERNAME|${{ secrets.RDS_DB_USERNAME }}|g' .aws/task-definition.json
        sed -i -e 's|SECRET_RAILS_MASTER_KEY|${{ secrets.SECRET_RAILS_MASTER_KEY }}|g' .aws/task-definition.json
        sed -i -e 's|AWS_IMAGE_URI|${{ secrets.AWS_IMAGE_URI }}|g' .aws/task-definition.json


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG -f ./Dockerfile.production .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
    #     container-name: ${{ env.CONTAINER_NAME_RAILS }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE_BACKEND }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    - name: Update service
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_BACKEND }} --force-new-deployment